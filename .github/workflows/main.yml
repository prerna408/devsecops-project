name: DevSecOps CI/CD to Kubernetes with Docker Hub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  DOCKER_REPO: devsecops-app
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  # Job 1: Scan Terraform code
  tfsec-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.2
        with:
          working_directory: infra
          soft_fail: true

  # Job 2: Build and Push (NO LONGER PRODUCES AN OUTPUT)
  build-and-push-image:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: tfsec-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # --- The 'outputs' section has been removed ---
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}
          # We will tag the image with the short commit hash
          tags: type=sha,prefix=,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  # Job 3: Deploy to EKS (RECONSTRUCTS THE IMAGE NAME)
  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      # --- THIS IS THE FOOLPROOF FIX ---
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/sealed-secret.yaml
          
          # 1. We will reconstruct the exact same image tag that the build job created.
          # This removes the dependency on the failing 'outputs' feature.
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          export IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_REPO }}:$IMAGE_TAG"

          # 2. As a final check, we will print the variable we just created.
          echo "--- DEBUG: Reconstructed Image URI is: $IMAGE_URI"
          
          # 3. This sed command will now use a variable that is guaranteed to exist.
          sed -i "s|prerna307/devsecops-app:latest|$IMAGE_URI|" k8s/deployment.yaml
          
          kubectl apply -f k8s/deployment.yaml